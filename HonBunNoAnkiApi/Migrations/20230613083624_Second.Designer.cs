// <auto-generated />
using System;
using HonbunNoAnkiApi.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HonbunNoAnkiApi.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20230613083624_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HonbunNoAnki.Models.Stage", b =>
                {
                    b.Property<long>("Stage_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.HasKey("Stage_ID");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("HonbunNoAnki.Models.User", b =>
                {
                    b.Property<long>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CurrentExperience")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HonbunNoAnki.Models.Word", b =>
                {
                    b.Property<long>("Word_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsInSRS")
                        .HasColumnType("bit");

                    b.Property<long?>("Stage_ID")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("StartCurrentSRSDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("StartInitialSRSDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("WordCollection_ID")
                        .HasColumnType("bigint");

                    b.HasKey("Word_ID");

                    b.HasIndex("Stage_ID");

                    b.HasIndex("WordCollection_ID");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("HonbunNoAnki.Models.WordCollection", b =>
                {
                    b.Property<long>("WordCollection_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("User_ID")
                        .HasColumnType("bigint");

                    b.HasKey("WordCollection_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("WordCollections");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.MeaningReading", b =>
                {
                    b.Property<long>("MeaningReading_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Meaning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfSpeech")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Word_ID")
                        .HasColumnType("bigint");

                    b.HasKey("MeaningReading_ID");

                    b.HasIndex("Word_ID");

                    b.ToTable("MeaningReadings");
                });

            modelBuilder.Entity("HonbunNoAnki.Models.Word", b =>
                {
                    b.HasOne("HonbunNoAnki.Models.Stage", "Stage")
                        .WithMany("Words")
                        .HasForeignKey("Stage_ID");

                    b.HasOne("HonbunNoAnki.Models.WordCollection", "WordCollection")
                        .WithMany("Words")
                        .HasForeignKey("WordCollection_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");

                    b.Navigation("WordCollection");
                });

            modelBuilder.Entity("HonbunNoAnki.Models.WordCollection", b =>
                {
                    b.HasOne("HonbunNoAnki.Models.User", "User")
                        .WithMany("WordCollections")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.MeaningReading", b =>
                {
                    b.HasOne("HonbunNoAnki.Models.Word", "Word")
                        .WithMany("MeaningReadings")
                        .HasForeignKey("Word_ID");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("HonbunNoAnki.Models.Stage", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("HonbunNoAnki.Models.User", b =>
                {
                    b.Navigation("WordCollections");
                });

            modelBuilder.Entity("HonbunNoAnki.Models.Word", b =>
                {
                    b.Navigation("MeaningReadings");
                });

            modelBuilder.Entity("HonbunNoAnki.Models.WordCollection", b =>
                {
                    b.Navigation("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
