// <auto-generated />
using System;
using HonbunNoAnkiApi.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HonbunNoAnkiApi.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20230927115920_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Meaning", b =>
                {
                    b.Property<long>("Meaning_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Meaning_ID"), 1L, 1);

                    b.Property<string>("PartOfSpeech")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WordDefinition_ID")
                        .HasColumnType("bigint");

                    b.HasKey("Meaning_ID");

                    b.HasIndex("WordDefinition_ID");

                    b.ToTable("Meanings");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.MeaningValue", b =>
                {
                    b.Property<long>("MeaningValue_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MeaningValue_ID"), 1L, 1);

                    b.Property<long>("Meaning_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeaningValue_ID");

                    b.HasIndex("Meaning_ID");

                    b.ToTable("MeaningValues");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Reading", b =>
                {
                    b.Property<long>("Reading_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Reading_ID"), 1L, 1);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WordDefinition_ID")
                        .HasColumnType("bigint");

                    b.HasKey("Reading_ID");

                    b.HasIndex("WordDefinition_ID")
                        .IsUnique();

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Stage", b =>
                {
                    b.Property<long>("Stage_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Stage_ID"), 1L, 1);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.HasKey("Stage_ID");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.User", b =>
                {
                    b.Property<long>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("User_ID"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CurrentExperience")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Word", b =>
                {
                    b.Property<long>("Word_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Word_ID"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsInSRS")
                        .HasColumnType("bit");

                    b.Property<long?>("Stage_ID")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("StartCurrentSRSDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("StartInitialSRSDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("WordCollection_ID")
                        .HasColumnType("bigint");

                    b.HasKey("Word_ID");

                    b.HasIndex("Stage_ID");

                    b.HasIndex("WordCollection_ID");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.WordCollection", b =>
                {
                    b.Property<long>("WordCollection_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WordCollection_ID"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("User_ID")
                        .HasColumnType("bigint");

                    b.HasKey("WordCollection_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("WordCollections");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.WordDefinition", b =>
                {
                    b.Property<long>("WordDefinition_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WordDefinition_ID"), 1L, 1);

                    b.Property<string>("OriginalEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Word_ID")
                        .HasColumnType("bigint");

                    b.HasKey("WordDefinition_ID");

                    b.HasIndex("Word_ID");

                    b.ToTable("WordDefinitions");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Meaning", b =>
                {
                    b.HasOne("HonbunNoAnkiApi.Models.WordDefinition", "WordDefinition")
                        .WithMany("Meanings")
                        .HasForeignKey("WordDefinition_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WordDefinition");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.MeaningValue", b =>
                {
                    b.HasOne("HonbunNoAnkiApi.Models.Meaning", "Meaning")
                        .WithMany("MeaningValues")
                        .HasForeignKey("Meaning_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meaning");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Reading", b =>
                {
                    b.HasOne("HonbunNoAnkiApi.Models.WordDefinition", "WordDefinition")
                        .WithOne("Reading")
                        .HasForeignKey("HonbunNoAnkiApi.Models.Reading", "WordDefinition_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WordDefinition");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Word", b =>
                {
                    b.HasOne("HonbunNoAnkiApi.Models.Stage", "Stage")
                        .WithMany("Words")
                        .HasForeignKey("Stage_ID");

                    b.HasOne("HonbunNoAnkiApi.Models.WordCollection", "WordCollection")
                        .WithMany("Words")
                        .HasForeignKey("WordCollection_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");

                    b.Navigation("WordCollection");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.WordCollection", b =>
                {
                    b.HasOne("HonbunNoAnkiApi.Models.User", "User")
                        .WithMany("WordCollections")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.WordDefinition", b =>
                {
                    b.HasOne("HonbunNoAnkiApi.Models.Word", "Word")
                        .WithMany("WordDefinitions")
                        .HasForeignKey("Word_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Word");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Meaning", b =>
                {
                    b.Navigation("MeaningValues");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Stage", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.User", b =>
                {
                    b.Navigation("WordCollections");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.Word", b =>
                {
                    b.Navigation("WordDefinitions");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.WordCollection", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("HonbunNoAnkiApi.Models.WordDefinition", b =>
                {
                    b.Navigation("Meanings");

                    b.Navigation("Reading");
                });
#pragma warning restore 612, 618
        }
    }
}
